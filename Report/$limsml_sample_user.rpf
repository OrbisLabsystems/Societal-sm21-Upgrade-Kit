{*******************************************************************************
*
* Module Name   : $LIMSML_SAMPLE_USER
*
* Purpose       : Sample LIMSML End User Customisation
*
* Document Ref  : N/a
*
*******************************************************************************}
{
*MOD1   Worksheet headers
*
*Raphael Castro 14-Jun-2022 SampleManager 21 report merge
*
*
*
*
********************************************************************************}




JOIN STANDARD_LIBRARY STD_UTILS
JOIN LIBRARY $LIB_UTILS

SET NOTPROTECTED
SET NAME "DEFER/"
SET COMPILE_OPTION DECLARE
ENABLE WINDOWS

{*******************************************************************************
*                              C O N S T A N T S
*******************************************************************************}

GLOBAL CONSTANT LIMSML_SAMPLE_REPLICATES               = "TRUE"
GLOBAL CONSTANT LIMSML_SAMPLE_REQUIRE_TEST             = "TRUE"
GLOBAL CONSTANT LIMSML_SAMPLE_REQUIRE_SAMPLE           = "TRUE"

GLOBAL CONSTANT LIMSML_SAMPLE_IGNORE_ADHOC             = "FALSE"
GLOBAL CONSTANT LIMSML_SAMPLE_IGNORE_RESULT_ERRORS     = "TRUE"
GLOBAL CONSTANT LIMSML_SAMPLE_IGNORE_ALL_RESULT_ERRORS = "FALSE"

GLOBAL CONSTANT LIMSML_SAMPLE_UPDATE_SAMPLE            = "TRUE"
GLOBAL CONSTANT LIMSML_SAMPLE_CREATE_SAMPLE            = "FALSE"
GLOBAL CONSTANT LIMSML_SAMPLE_CREATE_SAMPLE_TEMPLATE   = "BLANK"

GLOBAL CONSTANT LIMSML_SAMPLE_VALID_TEST_STATUS        = "CVP"
GLOBAL CONSTANT LIMSML_SAMPLE_UPDATE_TESTS             = "TRUE"
GLOBAL CONSTANT LIMSML_SAMPLE_CREATE_TESTS             = "FALSE"

GLOBAL CONSTANT LIMSML_SAMPLE_COMPLETE_TESTS           = "FALSE"
GLOBAL CONSTANT LIMSML_SAMPLE_COMPLETE_SAMPLE          = "FALSE"
GLOBAL CONSTANT LIMSML_SAMPLE_RECALCULATE              = "FALSE"

GLOBAL CONSTANT LIMSML_SAMPLE_UPDATE_INTERNAL_FIELDS   = TRUE

{*******************************************************************************
*                              M A I N   C O D E
*******************************************************************************}

EXIT

{*******************************************************************************
*                               R O U T I N E S
*******************************************************************************}

GLOBAL ROUTINE limsml_result_entry_get_sample ( sample_entity, VALUE sample_id )

{ 
* Get hold of the ID Numeric for a LIMSML Sample Result Entry Command
*
* Parameters   : Sample Entity, [HELPER_ENTITY] Sample Entity Helper Entity
*                Sample Id, [PACKED_DECIMAL] Sample ID
*
* Return Value : [PACKED_DECIMAL], The sample id to use. Return EMPTY to abandon
*
*******************************************************************************}

	RETURN ( sample_id )

ENDROUTINE

{******************************************************************************}

GLOBAL ROUTINE limsml_result_entry_get_test (       sample_entity , 
                                                    test_entity   , 
                                              VALUE sample_id     ,
                                              VALUE test_number   )

{ 
* Get hold of the Test Number for a LIMSML Sample Result Entry Command
*
* Parameters   : Sample Entity, [HELPER_ENTITY] Sample Entity Helper Entity
*                Test Entity, [HELPER_ENTITY] Test Entity Helper Entity
*                Sample Id, [PACKED_DECIMAL] Sample ID
*                Test Number, [PACKED_DECIMAL] Test Number
*
* Return Value : [PACKED_DECIMAL], The test num to use. Return EMPTY to abandon
*
*******************************************************************************}

	RETURN ( test_number )

ENDROUTINE

{******************************************************************************}

GLOBAL ROUTINE limsml_result_entry_get_analysis (       test_entity , 
                                                  VALUE analysis    )

{ 
* Get hold of the Analysis for a LIMSML Sample Result Entry Command
*
* Parameters   : Test Entity, [HELPER_ENTITY] Test Entity Helper Entity
*                Analysis, [IDENTITY] Analysis Identity
*
* Return Value : [IDENTITY], The Analysis to use. Return EMPTY to abandon
*
*******************************************************************************}

	RETURN ( analysis )

ENDROUTINE

{******************************************************************************}

GLOBAL ROUTINE limsml_result_entry_get_test_rep ( test_entity, VALUE test_rep )

{ 
* Get hold of the Analysis for a LIMSML Sample Result Entry Command
*
* Parameters   : Test Entity, [HELPER_ENTITY] Test Entity Helper Entity
*                Replicate Number, [INTEGER] Test Replicate Number
*
* Return Value : [INTEGER], The replicate to use. Return EMPTY to use the first
*
*******************************************************************************}

	RETURN ( test_rep )

ENDROUTINE

{******************************************************************************}

GLOBAL ROUTINE limsml_result_entry_valid_result ( VALUE test_number   , 
                                                        result_entity , 
                                                  VALUE valid         )

{ 
* Determine if the result is valid
*
* Parameters   : Test Number, [PACKED_DECIMAL] Test Number
*                Result Entity, [HELPER_ENTITY] Result Entity Helper Entity
*                Valid, [BOOLEAN] Current Validity of the result
*
* Return Value : [BOOLEAN], True if the result should be included
*
*******************************************************************************}

	valid = limsml_result_entry_valid_result_orbis ( test_number   , 
                                                        result_entity , 
                                                         valid, 
								FALSE)  {MOD1}

	RETURN ( valid )

ENDROUTINE

{******************************************************************************}

{ Empower }
{ MOD1 wsheet }
GLOBAL
ROUTINE limsml_result_entry_valid_result_orbis ( VALUE test_number   , 
                                                        result_entity , 
                                                  	VALUE valid  ,
VALUE is_wsheet     )

{
If the component is flagged to, check in LIMS CDS LTE if its mapped.
If so, update the result_entity component for the correct component name.
Otherwise, valid is the same value that got passed in to this routine.

Also, do the user map , if required 
}

	DECLARE comp_name, analysis, delim, compFieldName,
		 temp, system_instance, userFieldValue, rec

	system_instance = result_entity . get_field_value ( "MILL_DB_LINK" )
	IF (system_instance = EMPTY) THEN

		{ Not relevant  , not CDS }

		RETURN (TRUE)

	ENDIF
	system_instance = STRIP(system_instance)

{ MOD1 }
	DECLARE wsheet_prefix    
	wsheet_prefix = "W_"
	{ Check worksheet naming convention , record is for worksheet }
      { This filters worksheet results when required } 

	IF (NOT is_wsheet) AND (INDEX (system_instance, wsheet_prefix) = 1)

		RETURN (FALSE) 

	ELSEIF (is_wsheet) AND (INDEX (system_instance, wsheet_prefix) <> 1)

		RETURN (FALSE) 

	ENDIF

	delim = "|"
	compFieldName = "NAME"
	comp_name = result_entity . get_field_value ( compFieldName )

	IF (is_wsheet) THEN

		compFieldName = "NAME"
		{ even though db field is IDENTITY, NAME is in xml, so less change }

		comp_name = result_entity . get_field_value ( compFieldName )

		{ alias the value if required. E.g. get correct Sm instrument ID  }

		DECLARE textv
		textv = result_entity . get_field_value ( "TEXT" )
		rec = SELECT phrase.phrase_id WHERE phrase_type="WSHEET_VAL"
				AND phrase_text=STRIP(textv)

		IF (rec <> EMPTY) THEN

			textv = STRIP(rec)

		ENDIF

	ELSEIF ( comp_name = EMPTY )

		compFieldName = "COMPONENT_NAME"
		comp_name = result_entity . get_field_value ( compFieldName )
	
	ENDIF
{ end MOD1 }

	{ User map in LIMS LTE (same LTE check as the user validation check earlier) }
	{ Because that is checked elsewhere, no need to flag error if empty user here }
	{ The transform should ensure the sme userId used everywhere in the xml document }

	userFieldValue = result_entity . get_field_value ( "ENTERED_BY" )

	IF (userFieldValue <> EMPTY) THEN

		CALL_ROUTINE "Smemp_CheckUserMap"
                        		IN LIBRARY "OLS_IM_SM_EMPOWER"
                       	 	USING system_instance, userFieldValue 
                       	 	RETURNING rec

		IF (rec <> EMPTY) THEN

			result_entity . get_field_by_name( "ENTERED_BY" ) . setvalue( STRIP(rec) )

		ELSE

			result_entity . get_field_by_name( "ENTERED_BY" ) . setvalue( "" )

		ENDIF
	ENDIF


	{ Result map:  check for 2 delimiters }
	temp = comp_name
	IF (INDEX(temp,delim)>0) THEN

		temp=RIGHTSTRING (temp,STRINGLENGTH(temp)-INDEX(temp,delim))
	ELSE
		temp=""
	ENDIF
	
	IF (INDEX(temp,delim)>0) THEN

		analysis = SELECT test.analysis WHERE test_number = test_number

		{ If here, then the component expects a mapping check }

		DECLARE mapped_comp
		mapped_comp=EMPTY

		CALL_ROUTINE "Smemp_CheckComponentMap"
			IN LIBRARY "OLS_IM_SM_EMPOWER"
			USING comp_name, analysis, system_instance
			RETURNING mapped_comp

		IF (mapped_comp=EMPTY) THEN

			valid = FALSE
		ELSE

			{ Update the existing component name }
			result_entity . get_field_by_name( compFieldName ) . setvalue( STRIP(mapped_comp) )

			valid = TRUE

			{ if mapped, the component should exist already  }

		ENDIF

	ENDIF

	RETURN ( valid )

ENDROUTINE


GLOBAL ROUTINE limsml_result_entry_valid_result_field (       test_entity   , 
                                                        VALUE field_name    ,
                                                        VALUE valid         )

{ 
* Determine if the result field is valid
*
* Parameters   : Test Entity, [HELPER_ENTITY] Test Entity Helper Entity
*                Field Name, [STRING] Field Name
*                Valid, [BOOLEAN] Current Validity of the Field
*
* Return Value : [BOOLEAN], True if the result field should be included
*
*******************************************************************************}

	RETURN ( valid )

ENDROUTINE

{******************************************************************************}

GLOBAL ROUTINE limsml_result_entry_valid_result_error (       test_entity   , 
                                                              result_entity , 
                                                        VALUE error_id      ,
                                                        VALUE valid         )

{ 
* Determine if the result error is ignorable
*
* Parameters   : Test Entity, [HELPER_ENTITY] Test Entity Helper Entity
*                Result Entity, [HELPER_ENTITY] Result Entity Helper Entity                
*                Field Name, [STRING] Field Name
*                Valid, [BOOLEAN] Current Validity of the Error
*
* Return Value : [BOOLEAN], True if the result error should be ignored
*
*******************************************************************************}

	RETURN ( valid )

ENDROUTINE

{******************************************************************************}

GLOBAL ROUTINE limsml_result_entry_post_test_update (       test_entity   , 
                                                      VALUE test_number   )

{ 
* Called after the results are entered for a test
*
* Parameters   : Test Entity, [HELPER_ENTITY] Test Entity Helper Entity
*                Test Number, [PACKED_DECIMAL] Test Number
*
*******************************************************************************}

ENDROUTINE

{******************************************************************************}

GLOBAL ROUTINE limsml_result_entry_post_sample_update (       sample_entity , 
                                                        VALUE id_numeric    )

{ 
* Called after all the results are entered for a sample
*
* Parameters   : Sample Entity, [HELPER_ENTITY] Sample Entity Helper Entity
*                ID Numeric, [IDENTITY] Sample Identity
*
*******************************************************************************}

ENDROUTINE

{******************************************************************************}
{******************************************************************************}
{******************************************************************************}
