{******************************************************************************
*
* Module Name   : EM_SAMPLE_RECEIVE.RPF
*
* Purpose       : Template created using $AUXSETUP.
*                 Receive EM Sample
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}

JOIN LIBRARY $AUX_LIB
JOIN LIBRARY $LIB_SAMP
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $SAMPWSHT

SET NAME "DISPLAY/"
ENABLE WINDOWS
SET NOTPROTECTED

Array prompt_text
Array table_names
Array change_stat ARRAY_SIZE (3) = " "

Array display_details ARRAY_SIZE ( 0 , 6 )
Array prompt_details ARRAY_SIZE ( 0 , 6 )


{***********************************************************************}
{                   USER INPUT BEGINS HERE                              }
{***********************************************************************}

{SECTION A - SCREEN SETUP}
{specify the header text for the command window}
{ie header_txt =  "Change Sample Status"}

    header_txt = GET_USER_MESSAGE("AUX_RVP_HEADER_TXT" ,1)

{specify footer text for the command window }

    footer_txt = GET_USER_MESSAGE("AUX_RVP_FOOTER_TXT" ,1)

{specify the text string to be displayed upon        }
{successful completion of the command                }
{ie success_txt = "Sample Status Changed"            }

  success_txt        = GET_USER_MESSAGE("AUX_RVP_SUCCESS_TXT" ,1)

{specify the text string to be displayed upon        }
{abortion from the command                           }
{ie abort_txt =   "Change Sample Status Aborted"     }

  abort_txt          = GET_USER_MESSAGE("AUX_RVP_ABORT_TXT" ,1)

{specify the sample statuses allowable within the    }
{browse list for this command if sample identity     }
{is prompted for.                                    }

  samp_stat_allowed       =  "U"
  job_stat_allowed        =  "ACVX"
  test_stat_allowed        =  " "


{SECTION B - INITIAL PROMPTS }


{Specify the tables that the initial prompts browse  }
{upon .                                              }

   table_names [ 1 ]    = "SAMPLE"


{  table_names [ 2 ]    = "TEST"}


{Specify the initial prompt fields and the associated}
{prompt text strings                                 }

  prompt_text [ 1 ]    = GET_USER_MESSAGE("AUX_RVP_PROMPT_TXT_1" ,1)

 {prompt_text [ 2 ]    = "Enter Test Name"}


{SECTION C - DISPLAY INFORMATION}

{The user may require a header for the display area }
{Any descriptive text may be used here              }

    mess_area_one = ""


{Specify the fields which require displaying with the}
{appropriate descriptive text string                 }

{Display fields from prompt_table[1] : }

  display_details [ 1, MESSAGE_POSITION    ]   = GET_USER_MESSAGE("AUX_RVP_DISPLAY_TXT_1" ,1)
  display_details [ 1, TYPE_POSITION       ]   = "DISPLAY"
  display_details [ 1, TABLE_NAME_POSITION ]   = "SAMPLE"
  display_details [ 1, FIELD_NAME_POSITION ]   = "ID_TEXT"

  display_details [ 2, MESSAGE_POSITION    ]   = GET_USER_MESSAGE("AUX_RVP_DISPLAY_TXT_2" ,1)
  display_details [ 2, TYPE_POSITION       ]   = "DISPLAY"
  display_details [ 2, TABLE_NAME_POSITION ]   = "SAMPLE"
  display_details [ 2, FIELD_NAME_POSITION ]   = "RECD_DATE"

{ display_details [ 3, MESSAGE_POSITION    ]   = ""
  display_details [ 3, TYPE_POSITION       ]   = ""
  display_details [ 3, TABLE_NAME_POSITION ]   = ""
  display_details [ 3, FIELD_NAME_POSITION ]   = ""}


{Display fields from prompt_table[2] : }

 {display_details [ 1, MESSAGE_POSITION    ]   = ""
  display_details [ 1, TYPE_POSITION       ]   = ""
  display_details [ 1, TABLE_NAME_POSITION ]   = ""
  display_details [ 1, FIELD_NAME_POSITION ]   = ""

  display_details [ 2, MESSAGE_POSITION    ]   = ""
  display_details [ 2, TYPE_POSITION       ]   = ""
  display_details [ 2, TABLE_NAME_POSITION ]   = ""
  display_details [ 2, FIELD_NAME_POSITION ]   = ""

  display_details [ 3, MESSAGE_POSITION    ]   = ""
  display_details [ 3, TYPE_POSITION       ]   = ""
  display_details [ 3, TABLE_NAME_POSITION ]   = ""
  display_details [ 3, FIELD_NAME_POSITION ]   = ""}


  {SECTION D - FIELD ASSIGNMENT                }

{  This section is divided into three areas; }
{                                            }
{         (1) Interactive Update             }
{         (2) Non-interactive Update         }
{         (3) Status Change Update           }

{----------------------------------------------------}
{  1.   I N T E R A C T I V E   U P D A T E          }
{----------------------------------------------------}

{Specify the fields which require Updating and also  }
{require a user input.Define the text string         }
{associated with the input along with the browse type}


  {Update fields associated with prompt_table[1]}
  {Interactive_browse may be filled with either }
  {the browse table_name.field or a number to   }
  {define the size of the prompted field ie "10"}
  {or if no browse required " ".                }

{The user may require a header for the prompt area. }
{ Any descriptive text may be used here.            }

mess_area_two = ""


  prompt_details [ 1 , MESSAGE_POSITION    ]  = GET_USER_MESSAGE("AUX_RVP_PROMPT_TXT_2" ,1)
  prompt_details [ 1 , TYPE_POSITION       ]  = "FORMAT"
  prompt_details [ 1 , TABLE_NAME_POSITION ]  = "SAMPLE"
  prompt_details [ 1 , FIELD_NAME_POSITION ]  = "SAMPLED_DATE"

  prompt_details [ 2 , MESSAGE_POSITION    ]  = GET_USER_MESSAGE("AUX_RVP_PROMPT_TXT_3" ,1)
  prompt_details [ 2 , TYPE_POSITION       ]  = "FORMAT"
  prompt_details [ 2 , TABLE_NAME_POSITION ]  = "SAMPLE"
  prompt_details [ 2 , FIELD_NAME_POSITION ]  = "EM_SAMPLED_BY"

  {Update fields associated with prompt_table[2]}
{
  prompt_details [ 1 , MESSAGE_POSITION    ]  = ""
  prompt_details [ 1 , TYPE_POSITION       ]  = ""
  prompt_details [ 1 , TABLE_NAME_POSITION ]  = ""
  prompt_details [ 1 , FIELD_NAME_POSITION ]  = ""

  prompt_details [ 2 , MESSAGE_POSITION    ]  = ""
  prompt_details [ 2 , TYPE_POSITION       ]  = ""
  prompt_details [ 2 , TABLE_NAME_POSITION ]  = ""
  prompt_details [ 2 , FIELD_NAME_POSITION ]  = ""
 }

{-----------------------------------------------------}
{   2.   S T A T U S    C H A N G E   U P D A T E     }
{-----------------------------------------------------}


{  Non interactive update of the status field        }
{  is defined within the array change_stat[n]        }
{  where n = the array element that defines the      }
{  table associated with the status in the array     }
{  prompt_table[n].                                  }
{  To update sample.status to "V" the user would     }
{  define change_stat[1] = "V" where prompt_table[1] }
{   = "SAMPLE"                                       }
{  If the status change should be back to the old    }
{  status change_stat[n] = "OLD_STATUS".             }

   change_stat[1] = " "

{*************************************************}
{             END  OF  USER  INPUT                }
{*************************************************}

aux_generator (  header_txt ,
         footer_txt ,
             mess_area_one ,
         mess_area_two  ,
                 samp_stat_allowed ,
                 job_stat_allowed ,
                 test_stat_allowed ,
         prompt_text       ,
         table_names       ,
                 change_stat                  ,
                 global ( "current_library" ) ,
                 Success_txt ,
         Abort_txt   ,
         TRUE      ,
         display_details ,
         prompt_details  ,
         "Read Transaction"  ,
         "Write Transaction")
{**************************************************************************}
{                            Action Routine                                }
{**************************************************************************}

ROUTINE action ( VALUE first_id, VALUE second_id )

    { If the sample template specified creating a worksheet and
      printing it at sample login then do that here. }

    CHANGE SAMPLE STATUS TO "V", status

    IF status = EMPTY

        UPDATE sample
        COMMIT
    
        sample_receive_post_commit ( first_id )

    ELSE

        flash_message ( GET_USER_MESSAGE ( "AUX_LIB_STAT_TXT" , 1 ) :
                        status, TRUE )
    ENDIF

    { NOTE : All status processing has already been done so return EMPTY
      to stop any furthur status changes }

    RETURN ( EMPTY )

ENDROUTINE {action}

{**************************************************************************}
{                            Select Routine                                }
{**************************************************************************}

ROUTINE select_key ( VALUE line     , display_id      ,
                     VALUE first_id , VALUE second_id )

{menuprocs ...etc}

ENDROUTINE

{**************************************************************************}
{                           Validation Routine                             }
{**************************************************************************}

ROUTINE validation ( display_id )

RETURN ( TRUE )

ENDROUTINE

{**************************************************************************}
{                Post Commit routine to generate/print worksheet           }
{**************************************************************************}

GLOBAL ROUTINE sample_receive_post_commit ( VALUE sample_id )

    DECLARE check_id,
            template,
            create_worksheet,
            wsht_action,
            wsht_id,
            wsht_printer
    
    { Do we have the record? }
    
    check_id = SELECT sample . id_numeric
    
    IF check_id = EMPTY THEN
    
        check_id = SELECT sample . id_numeric
                    WHERE id_numeric = sample_id
                    
    ENDIF
    
    template = SELECT sample . template_id

    IF ( ( template = EMPTY ) OR
         ( template = "" ) ) THEN
         
        create_worksheet = FALSE
    
    ELSE
    
        create_worksheet = SELECT samp_tmpl_header . auto_wks
                           WHERE  identity = template

        IF create_worksheet = EMPTY THEN

            create_worksheet = FALSE

        ENDIF

    ENDIF

    IF ( create_worksheet ) THEN

        wrk_created = sample_worksheet_with_id ( sample_id )

        IF ( wrk_created ) THEN

            wsht_action  = SELECT samp_tmpl_header . wsht_action
            wsht_id      = SELECT samp_tmpl_header . wsht_id
            wsht_printer = SELECT samp_tmpl_header . wsht_printer


            IF ( wsht_action <> "N" ) THEN

                print_worksheet ( TRUE,
                                  wsht_id,
                                  wsht_printer,
                                  sample_id )
            ENDIF

        ENDIF

    ENDIF

ENDROUTINE

{**************************************************************************}
{                Post Commit routine to generate/print worksheet.          }
{                Called from explorer_aux post commit routine.             }
{**************************************************************************}

ROUTINE aux_post_commit_sample_receive ( self, data )

    DECLARE sample_id

    data . set_first ( )

    WHILE self . data . current <> EMPTY DO

        sample_id = SELECT 'self . table' . id_numeric 
                    IN OBJECT data . current

        CALL_ROUTINE "sample_receive_post_commit" 
             IN LIBRARY "$AUX_RVP" USING sample_id

        data . set_next ( )

    ENDWHILE

ENDROUTINE
